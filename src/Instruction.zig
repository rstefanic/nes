const Instruction = @This();

const testing = @import("std").testing;

opcode: Opcode,
mode: AddressMode,
cycles: u4,

pub const Opcode = enum {
    ADC,
    AND,
    ASL,
    BCC,
    BCS,
    BEQ,
    BIT,
    BMI,
    BNE,
    BPL,
    BRK,
    BVC,
    BVS,
    CLC,
    CLD,
    CLI,
    CLV,
    CMP,
    CPX,
    CPY,
    DEC,
    DEX,
    DEY,
    EOR,
    INC,
    INX,
    INY,
    JMP,
    JSR,
    LDA,
    LDX,
    LDY,
    LSR,
    NOP,
    ORA,
    PHA,
    PHP,
    PLA,
    PLP,
    ROL,
    ROR,
    RTI,
    RTS,
    SBC,
    SEC,
    SED,
    SEI,
    STA,
    STX,
    STY,
    TAX,
    TAY,
    TSX,
    TXA,
    TXS,
    TYA,

    // Illegal Opcodes
    ALR,
    ANC,
    ANE,
    ARR,
    DCP,
    ISC,
    JAM,
    LAS,
    LAX,
    LXA,
    RLA,
    RRA,
    SAX,
    SBX,
    SHA,
    SHX,
    SHY,
    SLO,
    SRE,
    TAS,
    USBC,
};

pub const AddressMode = enum {
    Implied,
    Accumulator,
    Immediate,
    Absolute,
    ZeroPage,
    AbsoluteX,
    AbsoluteY,
    ZeroPageX,
    ZeroPageY,
    Indirect,
    IndexedIndirect,
    IndirectIndexed,
    Relative,
};

pub fn decode(byte: u8) Instruction {
    return switch (byte) {
        0x00 => .{ .opcode = .BRK, .mode = .Implied, .cycles = 7 },
        0x01 => .{ .opcode = .ORA, .mode = .IndexedIndirect, .cycles = 6 },
        0x02 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0x03 => .{ .opcode = .SLO, .mode = .IndexedIndirect, .cycles = 8 },
        0x04 => .{ .opcode = .NOP, .mode = .ZeroPage, .cycles = 3 },
        0x05 => .{ .opcode = .ORA, .mode = .ZeroPage, .cycles = 3 },
        0x06 => .{ .opcode = .ASL, .mode = .ZeroPage, .cycles = 5 },
        0x07 => .{ .opcode = .SLO, .mode = .ZeroPage, .cycles = 5 },
        0x08 => .{ .opcode = .PHP, .mode = .Implied, .cycles = 3 },
        0x09 => .{ .opcode = .ORA, .mode = .Immediate, .cycles = 2 },
        0x0A => .{ .opcode = .ASL, .mode = .Accumulator, .cycles = 2 },
        0x0B => .{ .opcode = .ANC, .mode = .Immediate, .cycles = 2 },
        0x0C => .{ .opcode = .NOP, .mode = .Absolute, .cycles = 4 },
        0x0D => .{ .opcode = .ORA, .mode = .Absolute, .cycles = 4 },
        0x0E => .{ .opcode = .ASL, .mode = .Absolute, .cycles = 6 },
        0x0F => .{ .opcode = .SLO, .mode = .Absolute, .cycles = 6 },

        0x10 => .{ .opcode = .BPL, .mode = .Relative, .cycles = 2 },
        0x11 => .{ .opcode = .ORA, .mode = .IndirectIndexed, .cycles = 5 },
        0x12 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0x13 => .{ .opcode = .SLO, .mode = .IndirectIndexed, .cycles = 8 },
        0x14 => .{ .opcode = .NOP, .mode = .ZeroPageX, .cycles = 4 },
        0x15 => .{ .opcode = .ORA, .mode = .ZeroPageX, .cycles = 4 },
        0x16 => .{ .opcode = .ASL, .mode = .ZeroPageX, .cycles = 6 },
        0x17 => .{ .opcode = .SLO, .mode = .ZeroPageX, .cycles = 6 },
        0x18 => .{ .opcode = .CLC, .mode = .Implied, .cycles = 2 },
        0x19 => .{ .opcode = .ORA, .mode = .AbsoluteY, .cycles = 4 },
        0x1A => .{ .opcode = .NOP, .mode = .Implied, .cycles = 2 },
        0x1B => .{ .opcode = .SLO, .mode = .AbsoluteY, .cycles = 7 },
        0x1C => .{ .opcode = .NOP, .mode = .AbsoluteX, .cycles = 4 },
        0x1D => .{ .opcode = .ORA, .mode = .AbsoluteX, .cycles = 4 },
        0x1E => .{ .opcode = .ASL, .mode = .AbsoluteX, .cycles = 7 },
        0x1F => .{ .opcode = .SLO, .mode = .AbsoluteX, .cycles = 7 },

        0x20 => .{ .opcode = .JSR, .mode = .Absolute, .cycles = 6 },
        0x21 => .{ .opcode = .AND, .mode = .IndexedIndirect, .cycles = 6 },
        0x22 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0x23 => .{ .opcode = .RLA, .mode = .IndexedIndirect, .cycles = 8 },
        0x24 => .{ .opcode = .BIT, .mode = .ZeroPage, .cycles = 3 },
        0x25 => .{ .opcode = .AND, .mode = .ZeroPage, .cycles = 3 },
        0x26 => .{ .opcode = .ROL, .mode = .ZeroPage, .cycles = 5 },
        0x27 => .{ .opcode = .RLA, .mode = .ZeroPage, .cycles = 5 },
        0x28 => .{ .opcode = .PLP, .mode = .Implied, .cycles = 4 },
        0x29 => .{ .opcode = .AND, .mode = .Immediate, .cycles = 2 },
        0x2A => .{ .opcode = .ROL, .mode = .Accumulator, .cycles = 2 },
        0x2B => .{ .opcode = .ANC, .mode = .Immediate, .cycles = 2 },
        0x2C => .{ .opcode = .BIT, .mode = .Absolute, .cycles = 4 },
        0x2D => .{ .opcode = .AND, .mode = .Absolute, .cycles = 4 },
        0x2E => .{ .opcode = .ROL, .mode = .Absolute, .cycles = 6 },
        0x2F => .{ .opcode = .RLA, .mode = .Absolute, .cycles = 6 },

        0x30 => .{ .opcode = .BMI, .mode = .Relative, .cycles = 2 },
        0x31 => .{ .opcode = .AND, .mode = .IndirectIndexed, .cycles = 5 },
        0x32 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0x33 => .{ .opcode = .RLA, .mode = .IndirectIndexed, .cycles = 8 },
        0x34 => .{ .opcode = .NOP, .mode = .ZeroPageX, .cycles = 4 },
        0x35 => .{ .opcode = .AND, .mode = .ZeroPageX, .cycles = 4 },
        0x36 => .{ .opcode = .ROL, .mode = .ZeroPageX, .cycles = 6 },
        0x37 => .{ .opcode = .RLA, .mode = .ZeroPageX, .cycles = 6 },
        0x38 => .{ .opcode = .SEC, .mode = .Implied, .cycles = 2 },
        0x39 => .{ .opcode = .AND, .mode = .AbsoluteY, .cycles = 4 },
        0x3A => .{ .opcode = .NOP, .mode = .Implied, .cycles = 2 },
        0x3B => .{ .opcode = .RLA, .mode = .AbsoluteY, .cycles = 7 },
        0x3C => .{ .opcode = .NOP, .mode = .AbsoluteX, .cycles = 4 },
        0x3D => .{ .opcode = .AND, .mode = .AbsoluteX, .cycles = 4 },
        0x3E => .{ .opcode = .ROL, .mode = .AbsoluteX, .cycles = 7 },
        0x3F => .{ .opcode = .RLA, .mode = .AbsoluteX, .cycles = 7 },

        0x40 => .{ .opcode = .RTI, .mode = .Implied, .cycles = 6 },
        0x41 => .{ .opcode = .EOR, .mode = .IndexedIndirect, .cycles = 6 },
        0x42 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0x43 => .{ .opcode = .SRE, .mode = .IndexedIndirect, .cycles = 8 },
        0x44 => .{ .opcode = .NOP, .mode = .ZeroPage, .cycles = 3 },
        0x45 => .{ .opcode = .EOR, .mode = .ZeroPage, .cycles = 3 },
        0x46 => .{ .opcode = .LSR, .mode = .ZeroPage, .cycles = 5 },
        0x47 => .{ .opcode = .SRE, .mode = .ZeroPage, .cycles = 5 },
        0x48 => .{ .opcode = .PHA, .mode = .Implied, .cycles = 3 },
        0x49 => .{ .opcode = .EOR, .mode = .Immediate, .cycles = 2 },
        0x4A => .{ .opcode = .LSR, .mode = .Accumulator, .cycles = 2 },
        0x4B => .{ .opcode = .ALR, .mode = .Immediate, .cycles = 2 },
        0x4C => .{ .opcode = .JMP, .mode = .Absolute, .cycles = 3 },
        0x4D => .{ .opcode = .EOR, .mode = .Absolute, .cycles = 4 },
        0x4E => .{ .opcode = .LSR, .mode = .Absolute, .cycles = 6 },
        0x4F => .{ .opcode = .SRE, .mode = .Absolute, .cycles = 6 },

        0x50 => .{ .opcode = .BVC, .mode = .Relative, .cycles = 2 },
        0x51 => .{ .opcode = .EOR, .mode = .IndirectIndexed, .cycles = 5 },
        0x52 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0x53 => .{ .opcode = .SRE, .mode = .IndirectIndexed, .cycles = 8 },
        0x54 => .{ .opcode = .NOP, .mode = .ZeroPageX, .cycles = 4 },
        0x55 => .{ .opcode = .EOR, .mode = .ZeroPageX, .cycles = 4 },
        0x56 => .{ .opcode = .LSR, .mode = .ZeroPageX, .cycles = 6 },
        0x57 => .{ .opcode = .SRE, .mode = .ZeroPageX, .cycles = 6 },
        0x58 => .{ .opcode = .CLI, .mode = .Implied, .cycles = 3 },
        0x59 => .{ .opcode = .EOR, .mode = .AbsoluteY, .cycles = 4 },
        0x5A => .{ .opcode = .NOP, .mode = .Implied, .cycles = 2 },
        0x5B => .{ .opcode = .SRE, .mode = .AbsoluteY, .cycles = 7 },
        0x5C => .{ .opcode = .NOP, .mode = .AbsoluteX, .cycles = 4 },
        0x5D => .{ .opcode = .EOR, .mode = .AbsoluteX, .cycles = 4 },
        0x5E => .{ .opcode = .LSR, .mode = .AbsoluteX, .cycles = 7 },
        0x5F => .{ .opcode = .SRE, .mode = .AbsoluteX, .cycles = 7 },

        0x60 => .{ .opcode = .RTS, .mode = .Implied, .cycles = 6 },
        0x61 => .{ .opcode = .ADC, .mode = .IndexedIndirect, .cycles = 6 },
        0x62 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0x63 => .{ .opcode = .RRA, .mode = .IndexedIndirect, .cycles = 8 },
        0x64 => .{ .opcode = .NOP, .mode = .ZeroPage, .cycles = 3 },
        0x65 => .{ .opcode = .ADC, .mode = .ZeroPage, .cycles = 3 },
        0x66 => .{ .opcode = .ROR, .mode = .ZeroPage, .cycles = 5 },
        0x67 => .{ .opcode = .RRA, .mode = .ZeroPage, .cycles = 5 },
        0x68 => .{ .opcode = .PLA, .mode = .Implied, .cycles = 4 },
        0x69 => .{ .opcode = .ADC, .mode = .Immediate, .cycles = 2 },
        0x6A => .{ .opcode = .ROR, .mode = .Accumulator, .cycles = 2 },
        0x6B => .{ .opcode = .ARR, .mode = .Immediate, .cycles = 2 },
        0x6C => .{ .opcode = .JMP, .mode = .Indirect, .cycles = 5 },
        0x6D => .{ .opcode = .ADC, .mode = .Absolute, .cycles = 4 },
        0x6E => .{ .opcode = .ROR, .mode = .Absolute, .cycles = 6 },
        0x6F => .{ .opcode = .RRA, .mode = .Absolute, .cycles = 6 },

        0x70 => .{ .opcode = .BVS, .mode = .Relative, .cycles = 2 },
        0x71 => .{ .opcode = .ADC, .mode = .IndirectIndexed, .cycles = 5 },
        0x72 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0x73 => .{ .opcode = .RRA, .mode = .IndirectIndexed, .cycles = 8 },
        0x74 => .{ .opcode = .NOP, .mode = .ZeroPageX, .cycles = 4 },
        0x75 => .{ .opcode = .ADC, .mode = .ZeroPageX, .cycles = 4 },
        0x76 => .{ .opcode = .ROR, .mode = .ZeroPageX, .cycles = 6 },
        0x77 => .{ .opcode = .RRA, .mode = .ZeroPageX, .cycles = 6 },
        0x78 => .{ .opcode = .SEI, .mode = .Implied, .cycles = 2 },
        0x79 => .{ .opcode = .ADC, .mode = .AbsoluteY, .cycles = 4 },
        0x7A => .{ .opcode = .NOP, .mode = .Implied, .cycles = 2 },
        0x7B => .{ .opcode = .RRA, .mode = .AbsoluteY, .cycles = 7 },
        0x7C => .{ .opcode = .NOP, .mode = .AbsoluteX, .cycles = 4 },
        0x7D => .{ .opcode = .ADC, .mode = .AbsoluteX, .cycles = 4 },
        0x7E => .{ .opcode = .ROR, .mode = .AbsoluteX, .cycles = 7 },
        0x7F => .{ .opcode = .RRA, .mode = .AbsoluteX, .cycles = 7 },

        0x80 => .{ .opcode = .NOP, .mode = .Immediate, .cycles = 2 },
        0x81 => .{ .opcode = .STA, .mode = .IndexedIndirect, .cycles = 6 },
        0x82 => .{ .opcode = .NOP, .mode = .Immediate, .cycles = 2 },
        0x83 => .{ .opcode = .SAX, .mode = .IndexedIndirect, .cycles = 6 },
        0x84 => .{ .opcode = .STY, .mode = .ZeroPage, .cycles = 3 },
        0x85 => .{ .opcode = .STA, .mode = .ZeroPage, .cycles = 3 },
        0x86 => .{ .opcode = .STX, .mode = .ZeroPage, .cycles = 3 },
        0x87 => .{ .opcode = .SAX, .mode = .ZeroPage, .cycles = 3 },
        0x88 => .{ .opcode = .DEY, .mode = .Implied, .cycles = 2 },
        0x89 => .{ .opcode = .NOP, .mode = .Immediate, .cycles = 2 },
        0x8A => .{ .opcode = .TXA, .mode = .Implied, .cycles = 2 },
        0x8B => .{ .opcode = .ANE, .mode = .Immediate, .cycles = 2 },
        0x8C => .{ .opcode = .STY, .mode = .Absolute, .cycles = 4 },
        0x8D => .{ .opcode = .STA, .mode = .Absolute, .cycles = 4 },
        0x8E => .{ .opcode = .STX, .mode = .Absolute, .cycles = 4 },
        0x8F => .{ .opcode = .SAX, .mode = .Absolute, .cycles = 4 },

        0x90 => .{ .opcode = .BCC, .mode = .Relative, .cycles = 2 },
        0x91 => .{ .opcode = .STA, .mode = .IndirectIndexed, .cycles = 6 },
        0x92 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0x93 => .{ .opcode = .SHA, .mode = .IndirectIndexed, .cycles = 6 },
        0x94 => .{ .opcode = .STY, .mode = .ZeroPageX, .cycles = 4 },
        0x95 => .{ .opcode = .STA, .mode = .ZeroPageX, .cycles = 4 },
        0x96 => .{ .opcode = .STX, .mode = .ZeroPageY, .cycles = 4 },
        0x97 => .{ .opcode = .SAX, .mode = .ZeroPageY, .cycles = 4 },
        0x98 => .{ .opcode = .TYA, .mode = .Implied, .cycles = 2 },
        0x99 => .{ .opcode = .STA, .mode = .AbsoluteY, .cycles = 5 },
        0x9A => .{ .opcode = .TXS, .mode = .Implied, .cycles = 2 },
        0x9B => .{ .opcode = .TAS, .mode = .AbsoluteY, .cycles = 5 },
        0x9C => .{ .opcode = .SHY, .mode = .AbsoluteX, .cycles = 5 },
        0x9D => .{ .opcode = .STA, .mode = .AbsoluteX, .cycles = 5 },
        0x9E => .{ .opcode = .SHX, .mode = .AbsoluteY, .cycles = 5 },
        0x9F => .{ .opcode = .SHA, .mode = .AbsoluteY, .cycles = 5 },

        0xA0 => .{ .opcode = .LDY, .mode = .Immediate, .cycles = 2 },
        0xA1 => .{ .opcode = .LDA, .mode = .IndexedIndirect, .cycles = 6 },
        0xA2 => .{ .opcode = .LDX, .mode = .Immediate, .cycles = 2 },
        0xA3 => .{ .opcode = .LAX, .mode = .IndexedIndirect, .cycles = 6 },
        0xA4 => .{ .opcode = .LDY, .mode = .ZeroPage, .cycles = 3 },
        0xA5 => .{ .opcode = .LDA, .mode = .ZeroPage, .cycles = 3 },
        0xA6 => .{ .opcode = .LDX, .mode = .ZeroPage, .cycles = 3 },
        0xA7 => .{ .opcode = .LAX, .mode = .ZeroPage, .cycles = 3 },
        0xA8 => .{ .opcode = .TAY, .mode = .Implied, .cycles = 2 },
        0xA9 => .{ .opcode = .LDA, .mode = .Immediate, .cycles = 2 },
        0xAA => .{ .opcode = .TAX, .mode = .Implied, .cycles = 2 },
        0xAB => .{ .opcode = .LXA, .mode = .Immediate, .cycles = 2 },
        0xAC => .{ .opcode = .LDY, .mode = .Absolute, .cycles = 4 },
        0xAD => .{ .opcode = .LDA, .mode = .Absolute, .cycles = 4 },
        0xAE => .{ .opcode = .LDX, .mode = .Absolute, .cycles = 4 },
        0xAF => .{ .opcode = .LAX, .mode = .Absolute, .cycles = 4 },

        0xB0 => .{ .opcode = .BCS, .mode = .Relative, .cycles = 2 },
        0xB1 => .{ .opcode = .LDA, .mode = .IndirectIndexed, .cycles = 5 },
        0xB2 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0xB3 => .{ .opcode = .LAX, .mode = .IndirectIndexed, .cycles = 5 },
        0xB4 => .{ .opcode = .LDY, .mode = .ZeroPageX, .cycles = 4 },
        0xB5 => .{ .opcode = .LDA, .mode = .ZeroPageX, .cycles = 4 },
        0xB6 => .{ .opcode = .LDX, .mode = .ZeroPageY, .cycles = 4 },
        0xB7 => .{ .opcode = .LAX, .mode = .ZeroPageY, .cycles = 4 },
        0xB8 => .{ .opcode = .CLV, .mode = .Implied, .cycles = 2 },
        0xB9 => .{ .opcode = .LDA, .mode = .AbsoluteY, .cycles = 4 },
        0xBA => .{ .opcode = .TSX, .mode = .Implied, .cycles = 2 },
        0xBB => .{ .opcode = .LAS, .mode = .AbsoluteY, .cycles = 4 },
        0xBC => .{ .opcode = .LDY, .mode = .AbsoluteX, .cycles = 4 },
        0xBD => .{ .opcode = .LDA, .mode = .AbsoluteX, .cycles = 4 },
        0xBE => .{ .opcode = .LDX, .mode = .AbsoluteY, .cycles = 4 },
        0xBF => .{ .opcode = .LAX, .mode = .AbsoluteY, .cycles = 4 },

        0xC0 => .{ .opcode = .CPY, .mode = .Immediate, .cycles = 2 },
        0xC1 => .{ .opcode = .CMP, .mode = .IndexedIndirect, .cycles = 6 },
        0xC2 => .{ .opcode = .NOP, .mode = .Immediate, .cycles = 2 },
        0xC3 => .{ .opcode = .DCP, .mode = .IndexedIndirect, .cycles = 8 },
        0xC4 => .{ .opcode = .CPY, .mode = .ZeroPage, .cycles = 3 },
        0xC5 => .{ .opcode = .CMP, .mode = .ZeroPage, .cycles = 3 },
        0xC6 => .{ .opcode = .DEC, .mode = .ZeroPage, .cycles = 5 },
        0xC7 => .{ .opcode = .DCP, .mode = .ZeroPage, .cycles = 5 },
        0xC8 => .{ .opcode = .INY, .mode = .Implied, .cycles = 2 },
        0xC9 => .{ .opcode = .CMP, .mode = .Immediate, .cycles = 2 },
        0xCA => .{ .opcode = .DEX, .mode = .Implied, .cycles = 2 },
        0xCB => .{ .opcode = .SBX, .mode = .Immediate, .cycles = 2 },
        0xCC => .{ .opcode = .CPY, .mode = .Absolute, .cycles = 4 },
        0xCD => .{ .opcode = .CMP, .mode = .Absolute, .cycles = 4 },
        0xCE => .{ .opcode = .DEC, .mode = .Absolute, .cycles = 6 },
        0xCF => .{ .opcode = .DCP, .mode = .Absolute, .cycles = 6 },

        0xD0 => .{ .opcode = .BNE, .mode = .Relative, .cycles = 2 },
        0xD1 => .{ .opcode = .CMP, .mode = .IndirectIndexed, .cycles = 5 },
        0xD2 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0xD3 => .{ .opcode = .DCP, .mode = .IndirectIndexed, .cycles = 8 },
        0xD4 => .{ .opcode = .NOP, .mode = .ZeroPageX, .cycles = 4 },
        0xD5 => .{ .opcode = .CMP, .mode = .ZeroPageX, .cycles = 4 },
        0xD6 => .{ .opcode = .DEC, .mode = .ZeroPageX, .cycles = 6 },
        0xD7 => .{ .opcode = .DCP, .mode = .ZeroPageX, .cycles = 6 },
        0xD8 => .{ .opcode = .CLD, .mode = .Implied, .cycles = 2 },
        0xD9 => .{ .opcode = .CMP, .mode = .AbsoluteY, .cycles = 4 },
        0xDA => .{ .opcode = .NOP, .mode = .Implied, .cycles = 2 },
        0xDB => .{ .opcode = .DCP, .mode = .AbsoluteY, .cycles = 7 },
        0xDC => .{ .opcode = .NOP, .mode = .AbsoluteX, .cycles = 4 },
        0xDD => .{ .opcode = .CMP, .mode = .AbsoluteX, .cycles = 4 },
        0xDE => .{ .opcode = .DEC, .mode = .AbsoluteX, .cycles = 7 },
        0xDF => .{ .opcode = .DCP, .mode = .AbsoluteX, .cycles = 7 },

        0xE0 => .{ .opcode = .CPX, .mode = .Immediate, .cycles = 2 },
        0xE1 => .{ .opcode = .SBC, .mode = .IndexedIndirect, .cycles = 6 },
        0xE2 => .{ .opcode = .NOP, .mode = .Immediate, .cycles = 2 },
        0xE3 => .{ .opcode = .ISC, .mode = .IndexedIndirect, .cycles = 8 },
        0xE4 => .{ .opcode = .CPX, .mode = .ZeroPage, .cycles = 3 },
        0xE5 => .{ .opcode = .SBC, .mode = .ZeroPage, .cycles = 3 },
        0xE6 => .{ .opcode = .INC, .mode = .ZeroPage, .cycles = 5 },
        0xE7 => .{ .opcode = .ISC, .mode = .ZeroPage, .cycles = 5 },
        0xE8 => .{ .opcode = .INX, .mode = .Implied, .cycles = 2 },
        0xE9 => .{ .opcode = .SBC, .mode = .Immediate, .cycles = 2 },
        0xEA => .{ .opcode = .NOP, .mode = .Implied, .cycles = 2 },
        0xEB => .{ .opcode = .USBC, .mode = .Immediate, .cycles = 2 },
        0xEC => .{ .opcode = .CPX, .mode = .Absolute, .cycles = 4 },
        0xED => .{ .opcode = .SBC, .mode = .Absolute, .cycles = 4 },
        0xEE => .{ .opcode = .INC, .mode = .Absolute, .cycles = 6 },
        0xEF => .{ .opcode = .ISC, .mode = .Absolute, .cycles = 6 },

        0xF0 => .{ .opcode = .BEQ, .mode = .Relative, .cycles = 2 },
        0xF1 => .{ .opcode = .SBC, .mode = .IndirectIndexed, .cycles = 5 },
        0xF2 => .{ .opcode = .JAM, .mode = .Implied, .cycles = 0 },
        0xF3 => .{ .opcode = .ISC, .mode = .IndirectIndexed, .cycles = 8 },
        0xF4 => .{ .opcode = .NOP, .mode = .ZeroPageX, .cycles = 4 },
        0xF5 => .{ .opcode = .SBC, .mode = .ZeroPageX, .cycles = 4 },
        0xF6 => .{ .opcode = .INC, .mode = .ZeroPageX, .cycles = 6 },
        0xF7 => .{ .opcode = .ISC, .mode = .ZeroPageX, .cycles = 6 },
        0xF8 => .{ .opcode = .SED, .mode = .Implied, .cycles = 2 },
        0xF9 => .{ .opcode = .SBC, .mode = .AbsoluteY, .cycles = 4 },
        0xFA => .{ .opcode = .NOP, .mode = .Implied, .cycles = 2 },
        0xFB => .{ .opcode = .ISC, .mode = .AbsoluteY, .cycles = 7 },
        0xFC => .{ .opcode = .NOP, .mode = .AbsoluteX, .cycles = 4 },
        0xFD => .{ .opcode = .SBC, .mode = .AbsoluteX, .cycles = 4 },
        0xFE => .{ .opcode = .INC, .mode = .AbsoluteX, .cycles = 7 },
        0xFF => .{ .opcode = .ISC, .mode = .AbsoluteX, .cycles = 7 },
    };
}

test "It can read an LDA Instruction" {
    const ins = Instruction.decode(0xA9);
    const expected_instruction = Instruction{ .opcode = .LDA, .mode = .Immediate, .cycles = 2 };

    try testing.expectEqual(expected_instruction, ins);
}
